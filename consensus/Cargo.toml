[package]
name = "cedra-consensus"
description = "Cedra consensus"
version = "0.1.0"

# Workspace inherited keys
authors = { workspace = true }
edition = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
publish = { workspace = true }
repository = { workspace = true }
rust-version = { workspace = true }

[dependencies]
anyhow = { workspace = true }
cedra-bitvec = { workspace = true }
cedra-bounded-executor = { workspace = true }
cedra-channels = { workspace = true }
cedra-collections = { workspace = true }
cedra-config = { workspace = true }
cedra-consensus-notifications = { workspace = true }
cedra-consensus-types = { workspace = true }
cedra-crypto = { workspace = true }
cedra-crypto-derive = { workspace = true }
cedra-dkg = { workspace = true }
cedra-enum-conversion-derive = { workspace = true }
cedra-event-notifications = { workspace = true }
cedra-executor = { workspace = true }
cedra-executor-types = { workspace = true }
cedra-experimental-runtimes = { workspace = true }
cedra-fallible = { workspace = true }
cedra-infallible = { workspace = true }
cedra-logger = { workspace = true }
cedra-mempool = { workspace = true }
cedra-metrics-core = { workspace = true }
cedra-network = { workspace = true }
cedra-peer-monitoring-service-types = { workspace = true }
cedra-reliable-broadcast = { workspace = true }
cedra-runtimes = { workspace = true }
cedra-safety-rules = { workspace = true }
cedra-schemadb = { workspace = true }
cedra-secure-storage = { workspace = true }
cedra-short-hex-str = { workspace = true }
cedra-storage-interface = { workspace = true }
cedra-temppath = { workspace = true }
cedra-time-service = { workspace = true }
cedra-types = { workspace = true }
cedra-validator-transaction-pool = { workspace = true }
cedra-vm = { workspace = true }
async-trait = { workspace = true }
bcs = { workspace = true }
byteorder = { workspace = true }
bytes = { workspace = true }
chrono = { workspace = true }
claims = { workspace = true }
clap = { workspace = true }
dashmap = { workspace = true }
enum_dispatch = { workspace = true }
fail = { workspace = true }
futures = { workspace = true }
futures-channel = { workspace = true }
hex = { workspace = true }
itertools = { workspace = true }
lru = { workspace = true }
maplit = { workspace = true }
mini-moka = { workspace = true }
mirai-annotations = { workspace = true }
move-core-types = { workspace = true }
num-derive = { workspace = true }
num-traits = { workspace = true }
once_cell = { workspace = true }
ordered-float = { workspace = true }
rand = { workspace = true }
rayon = { workspace = true }
scopeguard = { workspace = true }
serde = { workspace = true }
serde_bytes = { workspace = true }
serde_json = { workspace = true }
serde_yaml = { workspace = true }
sha3 = { workspace = true }
strum_macros = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true }
tokio-retry = { workspace = true }
tokio-stream = { workspace = true }

[dev-dependencies]
cedra-cached-packages = { workspace = true }
cedra-config = { workspace = true, features = ["fuzzing"] }
cedra-consensus-types = { workspace = true, features = ["fuzzing"] }
cedra-executor-test-helpers = { workspace = true }
cedra-keygen = { workspace = true }
cedra-mempool = { workspace = true, features = ["fuzzing"] }
cedra-netcore = { workspace = true }
cedra-network = { workspace = true, features = ["fuzzing"] }
cedra-safety-rules = { workspace = true, features = ["testing"] }
cedra-vm = { workspace = true, features = ["fuzzing"] }
cedra-vm-validator = { workspace = true }
claims = { workspace = true }
mockall = { workspace = true }
move-core-types = { workspace = true }
proptest = { workspace = true }
proptest-derive = { workspace = true }
tempfile = { workspace = true }

[features]
default = []
fuzzing = [
    "cedra-consensus-types/fuzzing",
    "cedra-config/fuzzing",
    "cedra-crypto/fuzzing",
    "cedra-mempool/fuzzing",
    "cedra-types/fuzzing",
    "cedra-safety-rules/testing",
]
failpoints = ["fail/failpoints"]

[package.metadata.cargo-machete]
ignored = ["serde_bytes"]

[lints.clippy]
unwrap_used = "deny"
